{
  "swagger": "2.0",
  "info": {
    "title": "api.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/createProject": {
      "post": {
        "summary": "CreateUser creates a user.",
        "operationId": "CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiProject"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateProjectRequest"
            }
          }
        ],
        "tags": [
          "XYZ"
        ]
      }
    },
    "/api/createUser": {
      "post": {
        "summary": "CreateUser creates a user.",
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateUserRequest"
            }
          }
        ],
        "tags": [
          "OpenXYZ"
        ]
      }
    },
    "/api/projects": {
      "get": {
        "summary": "GetProjects returns the list of projects.",
        "operationId": "GetProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiProjectsList"
            }
          }
        },
        "tags": [
          "XYZ"
        ]
      }
    },
    "/api/projects/{project_id}/addContributors": {
      "post": {
        "summary": "AddProjectContributors adds one or more contributors to a project.",
        "operationId": "AddProjectContributors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAddProjectContributorsRequest"
            }
          }
        ],
        "tags": [
          "XYZ"
        ]
      }
    },
    "/api/projects/{project_id}/addDevices": {
      "post": {
        "summary": "AddProjectDevices adds one or more devices to a project.",
        "operationId": "AddProjectDevices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protobufEmpty"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiAddProjectDevicesRequest"
            }
          }
        ],
        "tags": [
          "XYZ"
        ]
      }
    },
    "/api/projects/{project_id}/devices": {
      "get": {
        "summary": "GetDevices returns the list of devices assigned to a project.",
        "operationId": "GetDevices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiDevicesList"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "XYZ"
        ]
      }
    }
  },
  "definitions": {
    "apiAddProjectContributorsRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "AddProjectContributorsRequest contains\na list of contributors to add to a project."
    },
    "apiAddProjectDevicesRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "AddProjectDevicesRequest contains\na list of devices to add to a project."
    },
    "apiCreateProjectRequest": {
      "type": "object",
      "properties": {
        "api_token": {
          "type": "string"
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "TODO: user a map for contributors and devices to avoid duplicates"
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "CreateProjectRequest contains all the fields for creating a project."
    },
    "apiCreateUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "api_token": {
          "type": "string"
        }
      },
      "description": "CreateUserRequest contains all the fields for creating a user."
    },
    "apiDevicesList": {
      "type": "object",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "DevicesList is a list of devices."
    },
    "apiProject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "creator_id": {
          "type": "string"
        },
        "contributors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Project represents an XYZ project."
    },
    "apiProjectsList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiProject"
          }
        }
      },
      "description": "ProjectsList is a list of projects."
    },
    "apiUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "int64"
        },
        "updated_at": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "User represents an XYZ user."
    },
    "protobufEmpty": {
      "type": "object",
      "description": "service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "title": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:"
    }
  }
}
